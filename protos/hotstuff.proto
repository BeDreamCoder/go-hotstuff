/*
Copyright Zhigui.com. All Rights Reserved.

SPDX-License-Identifier: Apache-2.0
*/

syntax = "proto3";

package pb;

option go_package = "github.com/zhigui-projects/go-hotstuff/protos/pb";

// Sign verify part cert info
message PartCert {
    int64 replica_id = 1;
    bytes signature = 2;
}

// QuorumCert is a data type that combines a collection of signatures from replicas.
message QuorumCert {
    // view number
    int64 view_number = 1;
    // The hash of block data.
    bytes block_hash = 2;
    // the votes of the leader gathered from replicas for proposal.
    map<int64, PartCert> signs = 3;
}

// The wrapper of block struct
message Block {
    // parent_hash is the parent hash of the block
    bytes parent_hash = 1;
    // Any data needed to exec, like: block, tx...
    bytes cmds = 2;
    // The miner's address of current block
    int64 proposer = 3;
    // The height of the blockchain
    int64 height = 4;
    // Timestamp of the block
    int64 timestamp = 5;
    // qc of cmd for parent block
    QuorumCert justify = 6;
    // qc of cmd for self
    QuorumCert self_qc = 7;
}

// Types of communication messages between replicas
message Message {
    string chain_id = 1;
    oneof type {
        ViewChange view_change = 2;
        Proposal proposal = 3;
        Vote vote = 4;
        Forward forward = 5;
    };
}

message ViewChange {
    bytes data = 1;
    bytes signature = 2;
}

// new view msg
message NewView {
    int64 view_number = 1;
    QuorumCert generic_qc = 2;
}

// broadcast proposal to other replicas
message Proposal {
    int64 view_number = 1;
    Block block = 2;
}

// Vote messages
message Vote {
    int64 view_number = 1;
    // Voter replica id
    int64 voter = 2;
    // The hash of block being voted
    bytes block_hash = 3;
    // Proof of validity for the vote
    PartCert cert = 4;
}

// forward cmds from external
message Forward {
    bytes data = 1;
}

message ConfigMetadata {
    // Number of nodes
    int64 n = 1;
    // Fault tolerance
    int64 f = 2;
    // Timeout of msg wait (seconds)
    int64 msg_wait_timeout = 3;
}

// These status codes are intended to resemble selected HTTP status codes
enum Status {
    UNKNOWN = 0;
    SUCCESS = 200;
    BAD_REQUEST = 400;
    FORBIDDEN = 403;
    NOT_FOUND = 404;
    REQUEST_ENTITY_TOO_LARGE = 413;
    INTERNAL_SERVER_ERROR = 500;
    NOT_IMPLEMENTED = 501;
    SERVICE_UNAVAILABLE = 503;
}

message SubmitRequest {
    string chain_id = 1;
    bytes cmds = 2;
}

message SubmitResponse {
    // Status code, which may be used to programatically respond to success/failure
    Status status = 1;
    // Info string which may contain additional information about the status returned
    string info = 2;
}

service Hotstuff {
    rpc Submit (SubmitRequest) returns (SubmitResponse);
}
